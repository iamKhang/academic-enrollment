@page "/login"
@attribute [AllowAnonymous]
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using MudBlazor
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager Navigation

<PageTitle>Đăng nhập</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
    <MudPaper Class="pa-8" Elevation="3">
        <MudStack Spacing="4">
            <MudText Typo="Typo.h4" Class="text-center" Color="Color.Primary">
                <MudIcon Icon="@Icons.Material.Filled.School" Class="mr-2" />
                Hệ thống Đăng ký Học phần
            </MudText>
            
            <MudText Typo="Typo.h6" Class="text-center" Color="Color.Secondary">
                Đăng nhập để tiếp tục
            </MudText>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mb-4">
                    @errorMessage
                </MudAlert>
            }
            
            <form method="post" action="/auth/login">
                <AntiforgeryToken />
                @if (!string.IsNullOrEmpty(returnUrl))
                {
                    <input type="hidden" name="returnUrl" value="@returnUrl" />
                }

                <!-- Hidden fields used for actual POST values -->
                <input type="hidden" name="username" value="@loginModel.Username" />
                <input type="hidden" name="password" value="@loginModel.Password" />
                <input type="hidden" name="rememberMe" value="@(loginModel.RememberMe ? "true" : "false")" />

                <MudStack Spacing="3">
                    <MudTextField @bind-Value="loginModel.Username"
                                  Label="Tên đăng nhập"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  RequiredError="Tên đăng nhập là bắt buộc"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Person" />

                    <MudTextField @bind-Value="loginModel.Password"
                                  Label="Mật khẩu"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Password"
                                  Required="true"
                                  RequiredError="Mật khẩu là bắt buộc"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Lock" />

                    <MudCheckBox T="bool" @bind-Value="loginModel.RememberMe" 
                                 Label="Ghi nhớ đăng nhập"
                                 Color="Color.Primary" />

                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               FullWidth="true"
                               Size="Size.Large"
                               StartIcon="@Icons.Material.Filled.Login"
                               Class="mt-4">
                        <MudText>Đăng nhập</MudText>
                    </MudButton>
                </MudStack>
            </form>
            
            <MudDivider Class="my-4" />
            
            <MudText Typo="Typo.caption" Class="text-center" Color="Color.Secondary">
                <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" Class="mr-1" />
                Thông tin đăng nhập: admin / Admin123!
            </MudText>
        </MudStack>
    </MudPaper>
</MudContainer>


@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private string? returnUrl;
    [Inject] private AuthenticationStateProvider AuthStateProvider { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        // Get ReturnUrl from query string
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("ReturnUrl", out var returnUrlValues))
        {
            returnUrl = returnUrlValues.FirstOrDefault();
        }

        // Nếu đã đăng nhập thì chuyển hướng luôn
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user?.Identity?.IsAuthenticated == true)
        {
            Navigation.NavigateTo(!string.IsNullOrEmpty(returnUrl) ? returnUrl! : "/", forceLoad: true);
            return;
        }
    }

    // Đăng nhập dùng form POST tới /auth/login (Minimal API) để set cookie và redirect

    public class LoginModel
    {
        [Required(ErrorMessage = "Tên đăng nhập là bắt buộc")]
        public string Username { get; set; } = "admin";

        [Required(ErrorMessage = "Mật khẩu là bắt buộc")]
        public string Password { get; set; } = "Admin123!";
        
        public bool RememberMe { get; set; } = true;
    }
}
