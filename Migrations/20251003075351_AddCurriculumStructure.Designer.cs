// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniversityRegistration.Data;

#nullable disable

namespace AcademicEnrollment.Migrations
{
    [DbContext(typeof(UniversityRegistrationContext))]
    [Migration("20251003075351_AddCurriculumStructure")]
    partial class AddCurriculumStructure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("role_name_index")
                        .HasFilter("[normalized_name] IS NOT NULL");

                    b.ToTable("asp_net_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("asp_net_role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("user_name_index")
                        .HasFilter("[normalized_user_name] IS NOT NULL");

                    b.ToTable("asp_net_users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("asp_net_user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("asp_net_user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("asp_net_user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("asp_net_user_tokens", (string)null);
                });

            modelBuilder.Entity("UniversityRegistration.Models.Admin", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_login_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_admins");

                    b.ToTable("admins");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Building", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("id");

                    b.Property<string>("CampusId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("campus_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_buildings");

                    b.HasIndex("CampusId")
                        .HasDatabaseName("ix_buildings_campus_id");

                    b.ToTable("buildings");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Campus", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_campuses");

                    b.ToTable("campuses");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Class", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("ProgramCohortId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("program_cohort_id");

                    b.HasKey("Id")
                        .HasName("pk_classes");

                    b.HasIndex("ProgramCohortId")
                        .HasDatabaseName("ix_classes_program_cohort_id");

                    b.ToTable("classes");
                });

            modelBuilder.Entity("UniversityRegistration.Models.CourseClass", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("id");

                    b.Property<int>("CurrentCapacity")
                        .HasColumnType("int")
                        .HasColumnName("current_capacity");

                    b.Property<string>("LecturerId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("lecturer_id");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int")
                        .HasColumnName("max_capacity");

                    b.Property<string>("SemesterId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("semester_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("subject_id");

                    b.HasKey("Id")
                        .HasName("pk_course_classes");

                    b.HasIndex("LecturerId")
                        .HasDatabaseName("ix_course_classes_lecturer_id");

                    b.HasIndex("SemesterId")
                        .HasDatabaseName("ix_course_classes_semester_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_course_classes_subject_id");

                    b.ToTable("course_classes");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Curriculum", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_curriculums");

                    b.ToTable("curriculums", (string)null);
                });

            modelBuilder.Entity("UniversityRegistration.Models.CurriculumElectiveGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("id");

                    b.Property<string>("CurriculumTermId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("curriculum_term_id");

                    b.Property<int>("MinCredits")
                        .HasColumnType("int")
                        .HasColumnName("min_credits");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_curriculum_elective_groups");

                    b.HasIndex("CurriculumTermId")
                        .HasDatabaseName("ix_curriculum_elective_groups_curriculum_term_id");

                    b.ToTable("curriculum_elective_groups");
                });

            modelBuilder.Entity("UniversityRegistration.Models.CurriculumElectiveGroupSubject", b =>
                {
                    b.Property<string>("ElectiveGroupId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("elective_group_id");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("subject_id");

                    b.HasKey("ElectiveGroupId", "SubjectId")
                        .HasName("pk_curriculum_elective_group_subjects");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_curriculum_elective_group_subjects_subject_id");

                    b.ToTable("curriculum_elective_group_subjects");
                });

            modelBuilder.Entity("UniversityRegistration.Models.CurriculumTerm", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("id");

                    b.Property<string>("CurriculumId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("curriculum_id");

                    b.Property<int>("TermOrder")
                        .HasColumnType("int")
                        .HasColumnName("term_order");

                    b.HasKey("Id")
                        .HasName("pk_curriculum_terms");

                    b.HasIndex("CurriculumId")
                        .HasDatabaseName("ix_curriculum_terms_curriculum_id");

                    b.ToTable("curriculum_terms");
                });

            modelBuilder.Entity("UniversityRegistration.Models.CurriculumTermSubject", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("id");

                    b.Property<string>("CurriculumTermId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("curriculum_term_id");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("subject_id");

                    b.HasKey("Id")
                        .HasName("pk_curriculum_term_subjects");

                    b.HasIndex("CurriculumTermId")
                        .HasDatabaseName("ix_curriculum_term_subjects_curriculum_term_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_curriculum_term_subjects_subject_id");

                    b.ToTable("curriculum_term_subjects");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Enrollment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("id");

                    b.Property<string>("AttributedElectiveGroupId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("attributed_elective_group_id");

                    b.Property<string>("CourseClassId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("course_class_id");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("enrollment_date");

                    b.Property<int>("EnrollmentType")
                        .HasColumnType("int")
                        .HasColumnName("enrollment_type");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("grade_id");

                    b.Property<string>("PracticeGroupId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("practice_group_id");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("pk_enrollments");

                    b.HasIndex("CourseClassId")
                        .HasDatabaseName("ix_enrollments_course_class_id");

                    b.HasIndex("GradeId")
                        .HasDatabaseName("ix_enrollments_grade_id");

                    b.HasIndex("PracticeGroupId")
                        .HasDatabaseName("ix_enrollments_practice_group_id");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_enrollments_student_id");

                    b.ToTable("enrollments");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Floor", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("id");

                    b.Property<string>("BuildingId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("building_id");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("pk_floors");

                    b.HasIndex("BuildingId")
                        .HasDatabaseName("ix_floors_building_id");

                    b.ToTable("floors");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("class_id");

                    b.Property<decimal?>("FinalScore")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("final_score");

                    b.Property<string>("LetterGrade")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("letter_grade");

                    b.Property<decimal?>("MidtermScore")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("midterm_score");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<decimal?>("TotalScore10")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_score10");

                    b.Property<decimal?>("TotalScore4")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_score4");

                    b.HasKey("Id")
                        .HasName("pk_grade");

                    b.ToTable("grade");
                });

            modelBuilder.Entity("UniversityRegistration.Models.GradeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComponentType")
                        .HasColumnType("int")
                        .HasColumnName("component_type");

                    b.Property<int>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("grade_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("score");

                    b.HasKey("Id")
                        .HasName("pk_grade_detail");

                    b.HasIndex("GradeId")
                        .HasDatabaseName("ix_grade_detail_grade_id");

                    b.ToTable("grade_detail");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Lecturer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("id");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("department_id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("full_name");

                    b.Property<string>("LecturerCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("lecturer_code");

                    b.HasKey("Id")
                        .HasName("pk_lecturers");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_lecturers_department_id");

                    b.ToTable("lecturers");
                });

            modelBuilder.Entity("UniversityRegistration.Models.PracticeGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("id");

                    b.Property<string>("CourseClassId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("course_class_id");

                    b.Property<int>("CurrentCapacity")
                        .HasColumnType("int")
                        .HasColumnName("current_capacity");

                    b.Property<string>("LecturerId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("lecturer_id");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int")
                        .HasColumnName("max_capacity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_practice_groups");

                    b.HasIndex("CourseClassId")
                        .HasDatabaseName("ix_practice_groups_course_class_id");

                    b.HasIndex("LecturerId")
                        .HasDatabaseName("ix_practice_groups_lecturer_id");

                    b.ToTable("practice_groups");
                });

            modelBuilder.Entity("UniversityRegistration.Models.ProgramCohort", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("id");

                    b.Property<string>("CurriculumId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("curriculum_id");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("department_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pk_program_cohorts");

                    b.HasIndex("CurriculumId")
                        .HasDatabaseName("ix_program_cohorts_curriculum_id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_program_cohorts_department_id");

                    b.ToTable("program_cohorts");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Room", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("id");

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("building");

                    b.Property<string>("BuildingId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("building_id");

                    b.Property<string>("Campus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("campus");

                    b.Property<string>("CampusId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("campus_id");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<int>("Floor")
                        .HasColumnType("int")
                        .HasColumnName("floor");

                    b.Property<string>("FloorId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("floor_id");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("room_type");

                    b.HasKey("Id")
                        .HasName("pk_rooms");

                    b.HasIndex("BuildingId")
                        .HasDatabaseName("ix_rooms_building_id");

                    b.HasIndex("CampusId")
                        .HasDatabaseName("ix_rooms_campus_id");

                    b.HasIndex("FloorId")
                        .HasDatabaseName("ix_rooms_floor_id");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Schedule", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("id");

                    b.Property<string>("CourseClassId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("course_class_id");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("day_of_week");

                    b.Property<int>("EndPeriod")
                        .HasColumnType("int")
                        .HasColumnName("end_period");

                    b.Property<string>("PracticeGroupId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("practice_group_id");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("room_id");

                    b.Property<int>("StartPeriod")
                        .HasColumnType("int")
                        .HasColumnName("start_period");

                    b.HasKey("Id")
                        .HasName("pk_schedules");

                    b.HasIndex("CourseClassId")
                        .HasDatabaseName("ix_schedules_course_class_id");

                    b.HasIndex("PracticeGroupId")
                        .HasDatabaseName("ix_schedules_practice_group_id");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_schedules_room_id");

                    b.ToTable("schedules");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Semester", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pk_semesters");

                    b.ToTable("semesters");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("id");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("class_id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("full_name");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("student_code");

                    b.HasKey("Id")
                        .HasName("pk_students");

                    b.HasIndex("ClassId")
                        .HasDatabaseName("ix_students_class_id");

                    b.ToTable("students");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Subject", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("id");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("department_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("PracticeCredits")
                        .HasColumnType("int")
                        .HasColumnName("practice_credits");

                    b.Property<int>("TheoryCredits")
                        .HasColumnType("int")
                        .HasColumnName("theory_credits");

                    b.HasKey("Id")
                        .HasName("pk_subjects");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_subjects_department_id");

                    b.ToTable("subjects");
                });

            modelBuilder.Entity("UniversityRegistration.Models.SubjectLecturer", b =>
                {
                    b.Property<string>("SubjectId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("subject_id");

                    b.Property<string>("LecturerId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("lecturer_id");

                    b.HasKey("SubjectId", "LecturerId")
                        .HasName("pk_subject_lecturers");

                    b.HasIndex("LecturerId")
                        .HasDatabaseName("ix_subject_lecturers_lecturer_id");

                    b.ToTable("subject_lecturers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Building", b =>
                {
                    b.HasOne("UniversityRegistration.Models.Campus", "Campus")
                        .WithMany("Buildings")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_buildings__campuses_campus_id");

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Class", b =>
                {
                    b.HasOne("UniversityRegistration.Models.ProgramCohort", "ProgramCohort")
                        .WithMany("Classes")
                        .HasForeignKey("ProgramCohortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_classes__program_cohorts_program_cohort_id");

                    b.Navigation("ProgramCohort");
                });

            modelBuilder.Entity("UniversityRegistration.Models.CourseClass", b =>
                {
                    b.HasOne("UniversityRegistration.Models.Lecturer", "Lecturer")
                        .WithMany("CourseClasses")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_course_classes__lecturers_lecturer_id");

                    b.HasOne("UniversityRegistration.Models.Semester", "Semester")
                        .WithMany("CourseClasses")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_classes__semesters_semester_id");

                    b.HasOne("UniversityRegistration.Models.Subject", "Subject")
                        .WithMany("CourseClasses")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_classes__subjects_subject_id");

                    b.Navigation("Lecturer");

                    b.Navigation("Semester");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("UniversityRegistration.Models.CurriculumElectiveGroup", b =>
                {
                    b.HasOne("UniversityRegistration.Models.CurriculumTerm", "CurriculumTerm")
                        .WithMany("ElectiveGroups")
                        .HasForeignKey("CurriculumTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_curriculum_elective_groups__curriculum_terms_curriculum_term_id");

                    b.Navigation("CurriculumTerm");
                });

            modelBuilder.Entity("UniversityRegistration.Models.CurriculumElectiveGroupSubject", b =>
                {
                    b.HasOne("UniversityRegistration.Models.CurriculumElectiveGroup", "ElectiveGroup")
                        .WithMany("Subjects")
                        .HasForeignKey("ElectiveGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_curriculum_elective_group_subjects_curriculum_elective_groups_elective_group_id");

                    b.HasOne("UniversityRegistration.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_curriculum_elective_group_subjects__subjects_subject_id");

                    b.Navigation("ElectiveGroup");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("UniversityRegistration.Models.CurriculumTerm", b =>
                {
                    b.HasOne("UniversityRegistration.Models.Curriculum", "Curriculum")
                        .WithMany("Terms")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_curriculum_terms_curriculums_curriculum_id");

                    b.Navigation("Curriculum");
                });

            modelBuilder.Entity("UniversityRegistration.Models.CurriculumTermSubject", b =>
                {
                    b.HasOne("UniversityRegistration.Models.CurriculumTerm", "CurriculumTerm")
                        .WithMany("RequiredSubjects")
                        .HasForeignKey("CurriculumTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_curriculum_term_subjects_curriculum_terms_curriculum_term_id");

                    b.HasOne("UniversityRegistration.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_curriculum_term_subjects__subjects_subject_id");

                    b.Navigation("CurriculumTerm");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Enrollment", b =>
                {
                    b.HasOne("UniversityRegistration.Models.CourseClass", "CourseClass")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enrollments_course_classes_course_class_id");

                    b.HasOne("UniversityRegistration.Models.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .HasConstraintName("fk_enrollments__grade_grade_id");

                    b.HasOne("UniversityRegistration.Models.PracticeGroup", "PracticeGroup")
                        .WithMany("Enrollments")
                        .HasForeignKey("PracticeGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_enrollments__practice_groups_practice_group_id");

                    b.HasOne("UniversityRegistration.Models.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enrollments__students_student_id");

                    b.Navigation("CourseClass");

                    b.Navigation("Grade");

                    b.Navigation("PracticeGroup");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Floor", b =>
                {
                    b.HasOne("UniversityRegistration.Models.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_floors_buildings_building_id");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("UniversityRegistration.Models.GradeDetail", b =>
                {
                    b.HasOne("UniversityRegistration.Models.Grade", "Grade")
                        .WithMany("GradeDetails")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_grade_detail_grade_grade_id");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Lecturer", b =>
                {
                    b.HasOne("UniversityRegistration.Models.Department", "Department")
                        .WithMany("Lecturers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lecturers_departments_department_id");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("UniversityRegistration.Models.PracticeGroup", b =>
                {
                    b.HasOne("UniversityRegistration.Models.CourseClass", "CourseClass")
                        .WithMany("PracticeGroups")
                        .HasForeignKey("CourseClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_practice_groups_course_classes_course_class_id");

                    b.HasOne("UniversityRegistration.Models.Lecturer", "Lecturer")
                        .WithMany("PracticeGroups")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_practice_groups_lecturers_lecturer_id");

                    b.Navigation("CourseClass");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("UniversityRegistration.Models.ProgramCohort", b =>
                {
                    b.HasOne("UniversityRegistration.Models.Curriculum", "Curriculum")
                        .WithMany()
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_program_cohorts_curriculums_curriculum_id");

                    b.HasOne("UniversityRegistration.Models.Department", "Department")
                        .WithMany("ProgramCohorts")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_program_cohorts_departments_department_id");

                    b.Navigation("Curriculum");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Room", b =>
                {
                    b.HasOne("UniversityRegistration.Models.Building", "BuildingRef")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_rooms_buildings_building_id");

                    b.HasOne("UniversityRegistration.Models.Campus", "CampusRef")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_rooms_campuses_campus_id");

                    b.HasOne("UniversityRegistration.Models.Floor", "FloorRef")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_rooms_floors_floor_id");

                    b.Navigation("BuildingRef");

                    b.Navigation("CampusRef");

                    b.Navigation("FloorRef");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Schedule", b =>
                {
                    b.HasOne("UniversityRegistration.Models.CourseClass", "CourseClass")
                        .WithMany("Schedules")
                        .HasForeignKey("CourseClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_schedules_course_classes_course_class_id");

                    b.HasOne("UniversityRegistration.Models.PracticeGroup", "PracticeGroup")
                        .WithMany("Schedules")
                        .HasForeignKey("PracticeGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_schedules_practice_groups_practice_group_id");

                    b.HasOne("UniversityRegistration.Models.Room", "Room")
                        .WithMany("Schedules")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_schedules_rooms_room_id");

                    b.Navigation("CourseClass");

                    b.Navigation("PracticeGroup");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Student", b =>
                {
                    b.HasOne("UniversityRegistration.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_students_classes_class_id");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Subject", b =>
                {
                    b.HasOne("UniversityRegistration.Models.Department", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_subjects_departments_department_id");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("UniversityRegistration.Models.SubjectLecturer", b =>
                {
                    b.HasOne("UniversityRegistration.Models.Lecturer", "Lecturer")
                        .WithMany("SubjectLecturers")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subject_lecturers_lecturers_lecturer_id");

                    b.HasOne("UniversityRegistration.Models.Subject", "Subject")
                        .WithMany("SubjectLecturers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subject_lecturers_subjects_subject_id");

                    b.Navigation("Lecturer");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Campus", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Class", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("UniversityRegistration.Models.CourseClass", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("PracticeGroups");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Curriculum", b =>
                {
                    b.Navigation("Terms");
                });

            modelBuilder.Entity("UniversityRegistration.Models.CurriculumElectiveGroup", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("UniversityRegistration.Models.CurriculumTerm", b =>
                {
                    b.Navigation("ElectiveGroups");

                    b.Navigation("RequiredSubjects");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Department", b =>
                {
                    b.Navigation("Lecturers");

                    b.Navigation("ProgramCohorts");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Grade", b =>
                {
                    b.Navigation("GradeDetails");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Lecturer", b =>
                {
                    b.Navigation("CourseClasses");

                    b.Navigation("PracticeGroups");

                    b.Navigation("SubjectLecturers");
                });

            modelBuilder.Entity("UniversityRegistration.Models.PracticeGroup", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("UniversityRegistration.Models.ProgramCohort", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Room", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Semester", b =>
                {
                    b.Navigation("CourseClasses");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Student", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("UniversityRegistration.Models.Subject", b =>
                {
                    b.Navigation("CourseClasses");

                    b.Navigation("SubjectLecturers");
                });
#pragma warning restore 612, 618
        }
    }
}
